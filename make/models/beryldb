%mode 0750
#!/usr/bin/env perl

# BerylDB - A modular database.
# http://www.beryldb.com
#
# Copyright (C) 2021 Carlos F. Ferry <cferry@beryldb.com>
# 
# This file is part of BerylDB. BerylDB is free software: you can
# redistribute it and/or modify it under the terms of the BSD License
# version 3.
#
# More information about our licensing can be found at https://docs.beryl.dev

use strict;
use POSIX;
use Fcntl;

use constant 
{
    STATUS_EXIT_SUCCESS => 0,
    STATUS_EXIT_DEAD_WITH_PIDFILE => 1,
    STATUS_EXIT_DEAD_WITH_LOCKFILE => 2,
    STATUS_EXIT_NOT_RUNNING => 3,
    STATUS_EXIT_UNKNOWN => 4,

    EXIT_SUCCESS => 0,
    GENERIC_EXIT_UNSPECIFIED => 1,
    GENERIC_EXIT_INVALID_ARGUMENTS => 2,
    GENERIC_EXIT_UNIMPLEMENTED => 3,
    GENERIC_EXIT_INSUFFICIENT_PRIVILEGE => 4,
    GENERIC_EXIT_NOT_INSTALLED => 5,
    GENERIC_EXIT_NOT_CONFIGURED => 6,
    GENERIC_EXIT_NOT_RUNNING => 7
};

my %BRLD_COLOR = (
        DEFAULT   => "\e[0m",
        BOLD      => "\e[1m",
        UNDERLINE => "\e[4m",
        RED    => "\e[1;31m",
        GREEN  => "\e[1;32m",
        YELLOW => "\e[1;33m",
        BLUE   => "\e[1;34m"
);

sub brld_format($) 
{
        my $message = shift;

        while ($message =~ /(<\|(\S+)\s(.*?)\|>)/) 
        {
                my ($match, $type, $text) = ($1, uc $2, $3);
        
                if (-t STDOUT && exists $BRLD_COLOR{$type}) 
                {
                        $message =~ s/\Q$match\E/$BRLD_COLOR{$type}$text$BRLD_COLOR{DEFAULT}/;
                } 
		else 
		{
                        $message =~ s/\Q$match\E/$text/;
                }
        }

        return $message;
}

sub show_error 
{
        print STDERR brld_format "[ <|RED ERROR|> ] ";

        for my $line (@_) 
        {
                say STDERR brld_format $line;
        }
        
        exit 1;
}

sub show_warning 
{
        print STDERR brld_format "[ <|BLUE INFO|> ] ";
        
        for my $line (@_) 
        {
                say STDERR brld_format $line;
        }
}

sub print_ok
{
        print STDERR brld_format "[ <|GREEN OK|> ] ";

        for my $line (@_) 
        {
                say STDERR brld_format $line;
        }
}

my $scriptpath = "@SCRIPT_DIR@";
my $conf_path	=	"@CONFIG_DIR@";
my $binary_path	=	"@BINARY_DIR@";
my $Timedir = "@RUNTIME_DIR@";
my $valgrindlogpath = "@LOG_DIR@/valgrind";
my $executable	=	"beryldb";
my $version	=	"@VERSION_FULL@";
my $uid = "@UID@";

my @gdbargs = (
	'--eval-command', 'handle SIGPIPE pass nostop noprint',
	'--eval-command', 'run',
	'--args', "$binary_path/$executable", qw(--nofork --nolog --debug)
);

sub fragmentize($$) 
{
	my ($base, $fragment) = @_;

	if ($fragment =~ /^\//) 
	{
		return $fragment;
	} 
	else 
	{
		return "$base/$fragment";
	}
}

if (!(grep { $_ eq '--asroot' } @ARGV) && ($< == 0 || $> == 0)) 
{
	if ($uid !~ /^\d+$/) 
	{
		$uid = getpwnam $uid;
	}

	if (!$uid) 
	{
		die "Cannot find a valid UID to change to";
	}

	$< = $uid;
	$> = $uid;
	
	if ($< == 0 || $> == 0) 
	{
		die "Could not drop root: $!";
	}
}

our($pid, $pidfile);
my $arg = shift(@ARGV);
my $conf;

for my $a (@ARGV)
{
	if ($a =~ m/^--config=(.*)$/)
	{
		$conf = $1;
		last;
	}
}
if (!defined $conf) 
{
	$conf = fragmentize $conf_path, "beryldb.conf";
	push @ARGV, '--config='.$conf;
}

getpidfile($conf);

my $subname = $arg;
$subname =~ s/-/_/g;
my $sub = main->can("cmd_$subname") || main->can("dev_$subname");

if (!defined($sub))
{
	cmd_help();
	exit GENERIC_EXIT_UNIMPLEMENTED;
}
else
{
	exit $sub->(@ARGV); 
}

sub cmd_help()
{
	my @subs = grep { $_ =~ m/^(cmd|dev)_/ && defined(main->can($_)) } keys(%::);
	my @cmds = grep /^cmd_/, @subs;
	my @devs = grep /^dev_/, @subs;
	local $_;
	$_ =~ s/^(cmd|dev)_// for (@cmds, @devs);
	$_ =~ s/_/-/g for (@cmds, @devs);
	print STDERR "Usage: ./beryldb (" . join("|", @cmds) . ")\n";
	print STDERR "Developer mode: (" . join("|", @devs) . ")\n";
	exit EXIT_SUCCESS;
}

sub cmd_status()
{
	if (getstatus() == 1) 
	{
		my $pid = read_process_id();
		print_ok "BerylDB is running (PID: $pid)";
		exit STATUS_EXIT_SUCCESS;
	} 
	else 
	{
		show_warning "BerylDB is not running.";
		exit STATUS_EXIT_NOT_RUNNING;
	}
}

sub cmd_version()
{
	print_ok "BerylDB version: $version";
	exit EXIT_SUCCESS;
}

sub cmd_restart(@)
{
	cmd_stop();
	unlink($pidfile) if (-e $pidfile);
	goto &cmd_start(@_);
}

sub cmd_start(@)
{
	if (getstatus() == 1) 
	{ 
		show_warning "BerylDB is already running."; 
		exit EXIT_SUCCESS; 
	}

	print "$binary_path/$executable was not located.\n" and return 0 unless(-e "$binary_path/$executable");
	print "$binary_path/$executable is not executable\n" and return 0 unless(-f "$binary_path/$executable" && -x "$binary_path/$executable");

	exec "$binary_path/$executable", @_;
	die "Unable to run the server: $!\n";
}

sub dev_debug(@)
{
	if (getstatus() == 1) 
	{ 
		show_warning "BerylDB is already running."; 
		return 0; 
	}

	print "$binary_path/$executable was not located.\n" and return 0 unless(-e "$binary_path/$executable");
	print "$binary_path/$executable is not executable\n" and return 0 unless(-f "$binary_path/$executable" && -x "$binary_path/$executable");

	checkgdb();

	exec 'gdb', @gdbargs, @_;
	die "Failed to start GDB: $!\n";
}

sub dev_valdebug(@)
{
	if (getstatus() == 1) 
	{ 
		show_warning "BerylDB is already running."; 
		return 0; 
	}

	print "$binary_path/$executable was not located.\n" and return 0 unless(-e "$binary_path/$executable");
	print "$binary_path/$executable is not executable\n" and return 0 unless(-f "$binary_path/$executable" && -x "$binary_path/$executable");

	checkvalgrind();
	checkgdb();

	exec qw(valgrind -v --tool=memcheck --leak-check=yes  --num-callers=30), "$binary_path/$executable", qw(--nofork --debug --nolog), @_;
	die "Failed to start valgrind: $!\n";
}

sub cmd_stop()
{
	if (getstatus() == 0) 
	{ 
		show_warning "BerylDB is not running. "; 
		return EXIT_SUCCESS; 
	}


	my $pid = read_process_id();
	print_ok "Stopping BerylDB (PID: $pid)";
	my $maxwait = (`ps -o command $pid 2>/dev/null` =~ /valgrind/i) ? 90 : 15;
	kill TERM => $pid or die "Cannot terminate BerylDB: $!\n";

        for (1..$maxwait) 
	{
                sleep 1;
                
		if (getstatus() == 0) 
		{
                        print_ok "BerylDB stopped.";
                        return EXIT_SUCCESS;
                }
        }

	print "Forcing stopping on BerylDB.\n";
	kill KILL => $pid;
	return EXIT_SUCCESS;
}

my %filesparsed;

sub getpidfile
{
	my ($file) = @_;

	if ($pid ne "") 
	{
		return;
	}

	$file = fragmentize $conf_path, $file;

	return if $filesparsed{$file};
	$filesparsed{$file} = 1;

	open INFILE, '<', $file or return;
	my(@lines) = <INFILE>;
	close INFILE;

	chomp(@lines);

	for my $i (@lines) 
	{
		$i =~ s/[^=]+=\s(.*)/\1/;
		
		if (($i =~ /<pid file=\"(\S+)\">/i) && ($i !~ /^#/))
		{
			$pidfile = fragmentize $Timedir, $1;
			return;
		}
	}


	for my $i (@lines) 
	{
		$i =~ s/[^=]+=\s(.*)/\1/;

		if (($i =~ s/\<include file=\"(.+?)\"\>//i) && ($i !~ /^#/))
		{
			getpidfile($1);
	
			if ($pidfile ne "") 
		        {
				return;
			}
		}
	}

	$pidfile = $Timedir . "/beryldb.pid";
}

sub getstatus 
{
	my $pid = read_process_id();
	return 0 if $pid == 0;
	return kill 0, $pid;
}


sub read_process_id 
{
	my $pid = 0;
	open PIDFILE, '<', $pidfile or return 0;

	while(<PIDFILE>)
	{
		/^(\d+)$/ and $pid = $1;
	}

	close PIDFILE;
	return $pid;
}

sub checkvalgrind
{
	unless(`valgrind --version`)
	{
		print "Unable to start valgrind: $!\n";
		exit GENERIC_EXIT_UNSPECIFIED;
	}
}

sub checkgdb
{
	unless(`gdb --version`)
	{
		print "Unable to start gdb: $!\n";
		exit GENERIC_EXIT_UNSPECIFIED;
	}
}

